// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap; // no allocation made contain only int representing address
    static Array freeList; // no allocation made contain only int representing address

    /*
        Initial state:
            the entire heap is available
            (freeList contains one long segment)
    */

    /*
        The freeList can be realized using the heap array
        The next and size properties of the memory segment
        beginning in address addr can be realized by heap[addr1] and heap[addr-2]
        alloc, deAlloc, and deFrag can be realized as
        operations on the heap array. 
    */

    /*
        alloc(size)
        Terminology: if segment.size ≥ size + 2 we say that the segment is possible

        search the freeList for:
            the first possible segment (first fit) , or
            the smallest possible segments (best fit)
        carve a block of size size+2 from this segment
        return the base address of the block’s data part
    */

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048; // heapBase, heap goes from 2048 to 16383 : 16383 - 2048 + 1 = 14336 slots
        let freeList = heap;
        let heap[0] = null; // next list
        let heap[1] = 14334; // length available = 14336 - 2 (metadata slots)
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
     /*
        alloc(size):
            search freeList using best-fit or first-fit heuristics
            to obtain a segment with segment.size ≥ size + 2
            if no such segment is found, return failure
            (or attempt defragmentation)
            block = base address of the found space
            update the freeList and the fields of block
            to account for the allocation
            return block
     */
     /*
        var block;
        while (true) {
            // current freeList is big enough
            boolean isPossible = freeList[1] >= size + 2

            if (isPossible) {
                

                // set base address of block
                block = freeList // base addr
                    + 1       // size slot
                    + freeList[1] // slots available - go to the end
                    - size // retrieve necessary slots

                // set block meta-info
                block[0] = null; // next = null
                block[1] = size;

                // update available space on current freeList
                freeList[1] = freeList[1] - size - 2 

                return block
            } else {
            

                if (freeList[0] == null) {
                    defrag()
                    freeList = heap
                } else {
                    freeList = freeList[0] // go to next
                }
            }
        }
     */
    function int alloc(int size) {
        var int block;

        while (true) {
             // let required = size + 2;

            // let isPossible = ~(freeList[1] < (size + 2)) // freeList[1] >= size + 2
            // boolean isPossible = freeList[1] >= size + 2
            if (~(freeList[1] < (size + 2))) { // enough space found
                /*
                    set block base address
                    block base address = (current free list base address) + 1 + (current free list size) - (size - 1) 

                    use (size - 1) because last slot is counted in data blocks
                */
                let block = freeList
                        + 2 
                        + freeList[1] 
                        - size;

                let block[0] = null; // next
                let block[1] = size; // size

                // reduce current free list size;
                let freeList[1] = freeList[1] - size - 2;
                return block;
            } else {
                if (freeList[0] = null) {
                    do Memory._defrag();
                } else {
                    do Output.printString("go to next block");
                    do Output.println();
                    let freeList = freeList[0];
                }
            }
        }
        return -100;
    }

    function void _defrag() {
        do Output.printString("try defrag - but not implemented");
        do Output.println();
        do Sys.error(1);
        return;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int target;
        let target = heap;
        while (true) {
            if (target[0] = null) {
                let target[0] = o; // set next
                let o[-2] = null; // remove next from array
                return;
            } else {
                let target = target[0];
            }

        }
        return;
    }    
}
