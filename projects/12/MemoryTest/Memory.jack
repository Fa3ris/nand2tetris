// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    /**
        access ram freely because JACK does not check
        range 0..32767
    */
    static Array ram;
    /**
        range 2048..16383

        no allocation made (Array.new), contain only int representing address
    */
    static Array heap;
    /**
        keep track of current freeList
        no allocation made (Array.new), contain only int representing address
    */
    static Array freeList; 

    /*
        Initial state:
            the entire heap is available
            (freeList contains one long segment)
    */

    /*
        The freeList can be realized using the heap array
        The next and size properties of the memory segment
        beginning in address addr can be realized by heap[addr1] and heap[addr-2]
        alloc, deAlloc, and deFrag can be realized as
        operations on the heap array. 
    */

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048; // heapBase, heap goes from 2048 to 16383 : 16383 - 2048 + 1 = 14336 slots
        let freeList = heap;
        let heap[0] = null; // next list
        let heap[1] = 14334; // length available = 14336 - 2 (metadata slots)
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }


     /*
        alloc(size)
        Terminology: if segment.size ≥ size + 2 we say that the segment is possible

        search the freeList for:
            the first possible segment (first fit) , or
            the smallest possible segments (best fit)
        carve a block of size size+2 from this segment
        return the base address of the block’s data part
    */
    
    /** Finds an available RAM block of the given size and returns
        a reference to its base address.

        alloc(size):
            search freeList using best-fit or first-fit heuristics
            to obtain a segment with segment.size ≥ size + 2

            if no such segment is found,
                return failure (or attempt defragmentation)

            block = base address of the found space
            update the freeList and the fields of block
            to account for the allocation
            return block
     */
    function int alloc(int size) {
        var int block;

        while (true) {
            // isPossible = freeList[1] >= size + 2
            // enough space found
            if (~(freeList[1] < (size + 2))) { 
                /*
                    get data block from the end of current freeList

                    freeList last address = (freeList base address) 
                                            + 1 // size slot
                                            + (freeList size)

                    block base address = (freeList last address) - (size - 1) 

                    (size - 1) because last address is counted in data blocks

                    = > (freeList base address)  + 1 + (freeList size) - size + 1
                */
                let block = freeList + 2 + freeList[1] - size;

                // set block metadata
                let block[-2] = null; // next
                let block[-1] = size; // size

                /* 
                    reduce current free list size by (size + 2) = data + metadata
                    size = size - (size + 2)
                */
                let freeList[1] = freeList[1] - size - 2;
                return block;
            } else {
                if (freeList[0] = null) {
                    do Memory._defrag();
                } else {
                    let freeList = freeList[0];
                }
            }
        }
        return -100;
    }

    /**
        TODO: implement
    */
    function void _defrag() {
        do Output.printString("defrag - not implemented");
        do Sys.error(1);
        return;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. 
     
     TODO: keep ordering of block addresses so that it is easier to have contiguous segments in order to
     defragment them
    
    if a -> b -> c
         ^    ^
        next  next
    
    then addrA < addrB < addrC
     */
    function void deAlloc(Array o) {
        var int target;
        let target = heap;
        while (true) {
            if (target[0] = null) {
                let target[0] = o - 2; // set next
                let o[-2] = null; // remove next from array
                return;
            } else {
                let target = target[0];
            }
        }
        return;
    }    
}
