// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array arr;
    field int max, size;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let max = maxLength;
        if (max < 1) {
            let max = 1;
        }
        let arr = Array.new(max);
        let size = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do arr.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | ~(j < max)) { return 0; }
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | ~(j < max)) { return; }
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (size < max) {
            let arr[size] = c;
            let size = size + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (size = 0) { return; }
        let arr[size] = 0;
        let size = size - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        return 0;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {

        /* 
        int2String(val) 
            lastDigit = val % 10;

            c = char corresponding to lastDigit

            if (val < 10) {
                no more digit
                return c as String
            } else {
                // dispose of intermediary String
                // copy into string of length + 1
                // and append
                // dispose of old string
                return int2String(val / 10).append(c)
            }

            if val < 0  
            copy into string of length + 1
            append - at beginning then copy rest

        */
        var int requiredLength;
        var int start;
        var boolean isNeg;

        do arr.dispose();

        let requiredLength = 1; // at least one digit to store

        if (val < 0) {
            let val = -val;
            let isNeg = true;
            let start = start + 1;
            let requiredLength = requiredLength + 1; // for minus sign
        }

        let arr = int2String(val, requiredLength, start);

        if (isNeg) {
            let arr[0] = 45; // minus sign
        }
        return;
    }

    /**
        val: the value to parse as string
        requiredLength: the array length necessary to store the number
        startIndex: position in array where to begin to store the left-most digit
            = 0 if number >= 0, 
            = 1 if number < 0, put minus at position 0
     */
    method Array int2String(int val, int requiredLength, int startIndex) {

        var int quotient;
        var int lastDigit;
        var int c;
        var Array res;

        let quotient = val / 10; // for reuse
        let lastDigit = val - (10 * quotient); // = remainder
        
        // '0' => 48 - so offset lastDigit by 48
        let c = 48 + lastDigit;

        if (val < 10) { // left-most digit reached
            // set fields
            let size = requiredLength;
            let max = size;
            // allocate final arr
            let res = Array.new(size);
            let res[startIndex] = c;
            return res;
        } else {
            let res = int2String(quotient, requiredLength + 1, startIndex);
            /* 
               EXPLANATION

               size - requiredLength + startIndex = where to put the char representing the digit

               ex: 102
                size = 3
                startIndex = 0

               '1' is handled in case above

               decide where to put '0' and '2'

                first call
                    int2String(102, 1, 0)
                    for '2'
                        requiredLength = 1
                        3 - 1 + 0 = 2

                second call
                    int2String(10, 2, 0)

                    for '0'
                        requiredLength = 2
                        3 - 2 + 0 = 1
            */
            
            let res[size - requiredLength + startIndex] = c;
            return res;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
