/* LCGRandom.jack, released under the BSD 2-Clause License, also known as Simplified BSD or FreeBSD License"
 * Copyright (c) 2013, Rowan Limb
 * All rights reserved.
 * This software implements a PRNG based on Linear Congruential Generator (Schrage Method).
 * Based on method documented here: http://www.cems.uwe.ac.uk/~irjohnso/coursenotes/ufeen8-15-m/p1192-parkmiller.pdf
 * and using constants for A and M from  "Tables of Linear Congruential Generators of Different Sizes and Good Lattice Structure" by Pierre L'Ecuyer, 1999 (citeseer: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.1024)
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
*/
/*
definition
Xn = (a * Xn-1 + c) mod m

m > 0 modulus
0 < a < m multiplier
0 <= c < m increment
0 <= seed < m 
*/

/*


2^16 = 65536

jack int = 16 bits using 2's complement

highest value
2^15 - 1 = 32767

Conditions
m and c are relatively prime = coprime
a-1 is divisible by all prime factors of m,
a-1 is divisible by 4 if m is divisible by 4.


2^14 = 16384 -> m  prime factor = 2

2. -> a-1 is even (divisible by 2: prime factor of m) so a is odd
3. 


if m is a power of 2, then a − 1 should be divisible by 4 but not divisible by 8, i.e. a ≡ 5 (mod 8)

a = 5 + k*8, k >=0

k = 32760 / 8 = 4095

a = 5 + 4095 * 8 = 32765


Xn = (a * Xn-1 + c) mod m  value between 0 and m-1

X = seed
m = 16384 = 2^14
a = 32765 = 5 + 4095 * 8
c = 1

The generator is not sensitive to the choice of c, as long as it is relatively prime to the modulus 
(e.g. if m is a power of 2, then c must be odd), so the value c=1 is commonly chosen.

*/
class LCGRandom {
    static int seed = 1;
    // static int A;
    // static int M;
    // static int Q;
    // static int R;


    // static int modulus;
    // static int increment;
    // static int multiplier;

    // static int firstStep;
    // static int secondStep;

    function void setSeed(int newSeed) {
        let seed = newSeed;
        if (seed=0) {
           let seed=1;
        }
        // let A=219;
        // let M=32749;
        // let Q=M/A;
        // let R=Utils.mod(M,A);

        // let modulus = 16384;
        // let increment = 1;
        // let multiplier = 32765;
        return;
    }

    /* returns a random int in range 0..(M-1) inclusive */
    function int rand() {
        // var int test;
        // var int res;

        // let test=(A*(Utils.mod(seed,Q)))-(R*(seed/Q));
        // if(test<0) {
        //    let seed=test+M;
        // }
        // else {
        //    let seed=test;
        // }

        let seed = Utils.mod((32765 * seed) + 1, 16384);
        return seed;
    }


    function int rangeThree() {
        var int rng;
        var int value;
        let rng = LCGRandom.rand();
        if (rng < 5461) {
            value = 1;
        } else {
            if (rng < 10922) {
                value = 2;
            } else {
                value = 3;
            }
        }
        return value;
    }

    /* returns a random int in range low..high inclusive */
    function int randRange(int low, int high) {
       var int scale;
       let scale = (M / (high - low + 1));
       return (LCGRandom.rand() / scale) + low;
    }

    
}