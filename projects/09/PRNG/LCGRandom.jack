/*
PRNG based on Linear Congruential Generator

Definition
X[n] = (a * X[n-1] + c) mod m

m > 0 modulus
0 < a < m multiplier
0 <= c < m increment
0 <= X[k] < m

2^16 = 65536

Jack int = 16 bits using 2's complement

highest value
2^15 - 1 = 32767

Conditions
m and c are relatively prime = coprime
a-1 is divisible by all prime factors of m,
a-1 is divisible by 4 if m is divisible by 4.

choose m a power of 2
2^14 = 16384 -> m prime factor = 2

if m is a power of 2, then a − 1 should be divisible by 4 but not divisible by 8, i.e. a ≡ 5 (mod 8)

a = 5 + k*8, k >=0

choose large k
k = 32760 / 8 = 4095

a = 5 + 4095 * 8 = 32765

The generator is not sensitive to the choice of c, as long as it is relatively prime to the modulus 
(e.g. if m is a power of 2, then c must be odd), so the value c=1 is commonly chosen.

Xn = (a * Xn-1 + c) mod m  value between 0 and m-1

X = seed
m = 16384 = 2^14
a = 32765 = 5 + 4095 * 8
c = 1

*/
class LCGRandom {
    static int seed;

    function void setSeed(int newSeed) {
        let seed = newSeed;
        if (seed < 0 | seed > 16383) {
           let seed = 1;
        }
        return;
    }

    function int getSeed() {
        return seed;
    }

    /* returns a random int in range 0..16383 inclusive */
    function int rand() {
        let seed = Utils.mod((32765 * seed) + 1, 16384);
        if (seed < 0) {
          let seed = seed + 16384;
        }
        return seed;
    }


    function int rangeThree() {
        var int rng;
        var int value;
        let rng = LCGRandom.rand();
        if (rng < 5461) {
           let value = 1;
        } else {
            if (rng < 10922) {
              let  value = 2;
            } else {
              let  value = 3;
            }
        }
        return value;
    }
}